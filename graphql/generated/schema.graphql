/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as PrismaClient from ".prisma/client"
import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateArtworkInput: { // input type
    creator: string; // String!
    currentOwner: string; // String!
    description: string; // String!
    handle: string; // String!
    id?: string | null; // String
    image: string; // String!
    link: string; // String!
    media: NexusGenScalars['Json']; // Json!
    price?: NexusGenScalars['BigInt'] | null; // BigInt
    reservePrice?: NexusGenScalars['BigInt'] | null; // BigInt
    saleType: string; // String!
    title: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Bytes: any
  DateTime: any
  Decimal: any
  Json: any
}

export interface NexusGenObjects {
  Artwork: PrismaClient.Artwork;
  Auction: PrismaClient.Auction;
  Bid: PrismaClient.Bid;
  ClientError: { // root type
    given: string; // String!
  }
  Mutation: {};
  Query: {};
  User: PrismaClient.User;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Artwork: { // field return type
    Auctions: NexusGenRootTypes['Auction'][]; // [Auction!]!
    auctionWithNoReservePriceAndNoBids: boolean; // Boolean!
    creator: NexusGenRootTypes['User']; // User!
    description: string; // String!
    handle: string; // String!
    id: string; // ID!
    image: string; // String!
    kind: string; // String!
    latestAuction: NexusGenRootTypes['Auction'] | null; // Auction
    listed: boolean; // Boolean!
    owner: NexusGenRootTypes['User'] | null; // User
    price: NexusGenScalars['BigInt'] | null; // BigInt
    reservePrice: NexusGenScalars['BigInt'] | null; // BigInt
    saleType: string; // String!
    title: string; // String!
  }
  Auction: { // field return type
    artworkId: string; // String!
    bids: NexusGenRootTypes['Bid'][]; // [Bid!]!
    currentHigh: NexusGenScalars['BigInt']; // BigInt!
    id: string; // String!
  }
  Bid: { // field return type
    id: string; // String!
  }
  ClientError: { // field return type
    given: string; // String!
  }
  Mutation: { // field return type
    addArtwork: NexusGenRootTypes['Artwork']; // Artwork!
    deleteArtwork: NexusGenRootTypes['Artwork']; // Artwork!
  }
  Query: { // field return type
    findArtwork: NexusGenRootTypes['Artwork']; // Artwork!
    findUser: NexusGenRootTypes['Artwork']; // Artwork!
    listArtworks: NexusGenRootTypes['Artwork'][]; // [Artwork!]!
    listCreators: NexusGenRootTypes['User'][]; // [User!]!
  }
  User: { // field return type
    bio: string; // String!
    created: NexusGenRootTypes['Artwork'][]; // [Artwork!]!
    email: string; // String!
    fullName: string; // String!
    handle: string; // String!
    id: string; // String!
    image: string | null; // String
    isApprovedCreator: boolean; // Boolean!
    owned: NexusGenRootTypes['Artwork'][]; // [Artwork!]!
  }
}

export interface NexusGenFieldTypeNames {
  Artwork: { // field return type name
    Auctions: 'Auction'
    auctionWithNoReservePriceAndNoBids: 'Boolean'
    creator: 'User'
    description: 'String'
    handle: 'String'
    id: 'ID'
    image: 'String'
    kind: 'String'
    latestAuction: 'Auction'
    listed: 'Boolean'
    owner: 'User'
    price: 'BigInt'
    reservePrice: 'BigInt'
    saleType: 'String'
    title: 'String'
  }
  Auction: { // field return type name
    artworkId: 'String'
    bids: 'Bid'
    currentHigh: 'BigInt'
    id: 'String'
  }
  Bid: { // field return type name
    id: 'String'
  }
  ClientError: { // field return type name
    given: 'String'
  }
  Mutation: { // field return type name
    addArtwork: 'Artwork'
    deleteArtwork: 'Artwork'
  }
  Query: { // field return type name
    findArtwork: 'Artwork'
    findUser: 'Artwork'
    listArtworks: 'Artwork'
    listCreators: 'User'
  }
  User: { // field return type name
    bio: 'String'
    created: 'Artwork'
    email: 'String'
    fullName: 'String'
    handle: 'String'
    id: 'String'
    image: 'String'
    isApprovedCreator: 'Boolean'
    owned: 'Artwork'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addArtwork: { // args
      InputType?: NexusGenInputs['CreateArtworkInput'] | null; // CreateArtworkInput
    }
    deleteArtwork: { // args
      id: string; // String!
    }
  }
  Query: {
    findArtwork: { // args
      id: string; // String!
    }
    findUser: { // args
      id: string; // String!
    }
    listArtworks: { // args
      auction?: boolean | null; // Boolean
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: true
    __typename: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}