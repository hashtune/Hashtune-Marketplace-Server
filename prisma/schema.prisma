// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ModelKind {
  artwork
  artworkMembership
  user
  wallet
  notification
  follower
  auction
  bid
}

enum ArtworkRole {
  creator
  feature
  owner
}

enum SaleType {
  auction
  fixed
}

enum ArtworkType {
  song
  album
}

enum Genre {
  rock
  electronic
  shoegaze
  dreampop
  indierock
  postrock
  stuffonlymeandmyfriendsknow
}

model Artwork {
  kind          ModelKind       @default(artwork)
  id            String          @id @default(cuid())
  artworkType   ArtworkType?
  handle        String          @unique
  title         String
  image         String
  description   String
  link          String // Link 
  media         Json? // Array of objects objects song: [{title: "", media:""}], album: [{title: "", media:""}, {title: "", media: ""}]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  genre         Genre[]
  memberships   ArtworkToUser[]
  notifications Notification[]
  saleType      SaleType?
  price         BigInt?
  startingPrice BigInt?
  auctionId     String
  auctions      Auction[]
  likedById     String
  likedBy       User[]          @relation(fields: [likedById], references: [id], name: "likedBy")

}

model Auction {
  kind        ModelKind @default(auction)
  id          String    @id @default(cuid())
  artworkId   String
  artwork     Artwork   @relation(fields: [artworkId], references: [id])
  bid         Bid[]
  currentHigh BigInt
}

model Bid {
  kind      ModelKind @default(bid)
  id        String    @id @default(cuid())
  auctionId String
  auction   Auction   @relation(fields: [auctionId], references: [id])
  offer     BigInt
  userId    String
  user      User      @relation(fields: [userId], references: [id])
}

model ArtworkToUser {
  kind      ModelKind   @default(artworkMembership)
  id        String      @id @default(cuid())
  role      ArtworkRole @default(creator)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  artworkId String
  artwork   Artwork     @relation(fields: [artworkId], references: [id])
  userId    String
  user      User        @relation(fields: [userId], references: [id])
}

model User {
  kind                   ModelKind       @default(user)
  artworkMemberships     ArtworkToUser[]
  fullName               String?
  handle                 String?         @unique 
  id                     String          @id @default(cuid())
  email                  String?         @unique
  image                  String?
  isApprovedCreator      Boolean?
  coverImage             String?
  createdAt              DateTime?       @default(now())
  updatedAt              DateTime?       @updatedAt
  wallets                Wallet[]
  likes                  Artwork[]       @relation("likedBy")
  notificationsReceived  Notification[]  @relation("notificationToReceiver")
  notificationsTriggered Notification[]  @relation("notificationToUser")
  followers              Follower[]
  bids                   Bid[]
  socialLinks            Json?
}

model Follower {
  kind      ModelKind @default(follower)
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum NotificationType {
  like
  follower
  sale
}

model Notification {
  kind       ModelKind        @default(notification)
  id         String           @id @default(cuid())
  seen       Boolean
  receiverId String
  receiver   User             @relation(fields: [receiverId], references: [id], name: "notificationToReceiver")
  userId     String?
  user       User?            @relation(fields: [userId], references: [id], name: "notificationToUser")
  type       NotificationType
  artworkId  String?
  artwork    Artwork?         @relation(fields: [artworkId], references: [id])
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

enum WalletProvider {
  metamask
}

model Wallet {
  kind      ModelKind      @default(wallet)
  id        String         @id @default(cuid())
  provider  WalletProvider
  publicKey String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String
  user      User           @relation(fields: [userId], references: [id])
}
