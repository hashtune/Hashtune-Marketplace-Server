// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator nexusPrisma {
   provider = "nexus-prisma"
}


enum ModelKind {
  artwork
  artworkMembership
  user
  wallet
  auction
  bid
  sale
  event
  eventData
}

enum ArtworkRole {
  creator
  feature
  owner
}

enum SaleType {
  auction
  fixed
}

model User {
  kind              ModelKind @default(user)
  fullName          String
  handle            String    @unique
  id                String    @id @default(cuid())
  email             String    @unique
  bio               String
  image             String?
  isApprovedCreator Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  socialLinks       Json?
  bids              Bid[]
  sales             Sale[]
  wallet            Wallet    @relation(fields: [walletId], references: [id])
  walletId          String    @unique
  owned             Artwork[] @relation("currentOwner")
  featuredOn        Artwork[] @relation("features")
  created           Artwork[] @relation("originalCreator")
  events            Event[]   @relation("userEvent")
}

model Wallet {
  kind      ModelKind @default(wallet)
  id        String    @id @default(cuid())
  provider  String    @default("metamask")
  publicKey String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?
}

enum EventType {
// TODO: Better name for first two 
owner_sale_created 
// Might not need this second event
owner_sale_ended
buyer_sale_created
owner_bid_received
buyer_bid_received
owner_bid_accepted
buyer_bid_accepted
buyer_bid_lost
owner_bid_automatically_accepted
buyer_bid_automatically_accepted
buyer_bid_automatically_lost
buyer_bid_exceeded
// These events not emitted from contract right now
artist_sale_received_royalties
artist_auction_received_royalties
}


model EventData {
  kind              ModelKind @default(eventData)
  id           String    @id @default(cuid())
  eventType    EventType
  price         BigInt?
  txHash        String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  eventId     String
  event       Event @relation(fields: [eventId], references: [id] )       
}

model Event {
    kind              ModelKind @default(event)
    id           String    @id @default(cuid())
    artwork      String
    artworkEventId Artwork @relation(name: "artworkEvent", fields: [artwork], references: [id])
    // TODO switch
    user         String
    userEventId User @relation(name: "userEvent", fields: [user], references: [id])
    version    BigInt @default(autoincrement())
    eventData   EventData?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    @@unique([id, version])
}

model Artwork {
  kind         ModelKind @default(artwork)
  id           String    @id @default(cuid())
  handle       String    @unique
  txHash       String    
  tokenId      String   @unique
  title        String
  image        String
  description  String
  link         String
  media        Json // Array of objects objects song: [{title: "", media:""}], album: [{title: "", media:""}, {title: "", media: ""}]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  saleType     SaleType
  price        BigInt?
  reservePrice BigInt?
  auctions     Auction[] @relation(name: "auctions")
  sales        Sale[]    @relation(name: "sales")
  ownerId      String
  currentOwner User      @relation(name: "currentOwner", fields: [ownerId], references: [id])
  features     User[]    @relation(name: "features")
  creatorId    String
  creator      User      @relation(name: "originalCreator", fields: [creatorId], references: [id])
  listed       Boolean   @default(true)
  streamCount  Int       @default(0)
  events    Event[]   @relation("artworkEvent")
}

model Auction {
  kind              ModelKind @default(auction)
  id                String    @id @default(cuid())
  artworkId         String
  artwork           Artwork   @relation("auctions", fields: [artworkId], references: [id])
  bids              Bid[]
  currentHigh       BigInt    @default(0)
  currentHighBidder String?
  live              Boolean   @default(false)
  liveAt            DateTime?
  isFinalized       Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Sale {
  kind      ModelKind @default(sale)
  id        String    @id @default(cuid())
  artworkId String
  artwork   Artwork   @relation("sales", fields: [artworkId], references: [id])
  price     BigInt
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Bid {
  kind      ModelKind @default(bid)
  id        String    @id @default(cuid())
  auctionId String
  auction   Auction   @relation(fields: [auctionId], references: [id])
  offer     BigInt
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// TODO: Adding an walletProvider enum that we can use in typescript from Prisma's schema
