// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ModelKind {
  artwork
  artworkMembership
  user
  wallet
  auction
  bid
  sale
}

enum ArtworkRole {
  creator
  feature
  owner
}

enum SaleType {
  auction
  fixed
}

model User {
  kind                   ModelKind      @default(user)
  fullName               String
  handle                 String         @unique
  id                     String         @id @default(cuid())
  email                  String         @unique
  bio                    String
  image                  String?
  isApprovedCreator      Boolean        @default(false)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  socialLinks            Json?
  bids                   Bid[]
  sales                  Sale[]
  wallets                Wallet[]
  owned                  Artwork[]      @relation("currentOwner")
  featuredOn             Artwork[]      @relation("features")
  created                Artwork[]      @relation("originalCreator")
}

model Artwork {
  kind          ModelKind      @default(artwork)
  id            String         @id @default(cuid())
  handle        String         @unique
  title         String
  image         String
  description   String
  link          String 
  media         Json // Array of objects objects song: [{title: "", media:""}], album: [{title: "", media:""}, {title: "", media: ""}]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  saleType      SaleType
  price         BigInt?
  reservePrice  BigInt?
  auctions      Auction[]      @relation(name: "auctions")
  sales         Sale[]         @relation(name: "sales")
  ownerId        String
  currentOwner  User           @relation(name: "currentOwner", fields: [ownerId], references: [id])
  features      User[]         @relation(name: "features")
  creatorId        String
  creator       User           @relation(name: "originalCreator", fields: [creatorId], references: [id])
  listed        Boolean        @default(true)
  streamCount   Int            @default(0)
}

model Auction {
  kind              ModelKind @default(auction)
  id                String    @id @default(cuid())
  artworkId         String
  artwork           Artwork   @relation("auctions", fields: [artworkId], references: [id])
  bids              Bid[]
  currentHigh       BigInt    @default(0)
  currentHighBidder String?
  live              Boolean   @default(false)
  liveAt            DateTime?
  isFinalized       Boolean   @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Sale {
  kind              ModelKind @default(sale)
  id                String    @id @default(cuid())
  artworkId         String
  artwork           Artwork   @relation("sales", fields: [artworkId], references: [id])  
  price             BigInt     
  userId            String
  user              User      @relation(fields: [userId], references: [id]) 
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Bid {
  kind      ModelKind @default(bid)
  id        String    @id @default(cuid())
  auctionId String
  auction   Auction   @relation(fields: [auctionId], references: [id])
  offer     BigInt
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum WalletProvider {
  metamask
}

model Wallet {
  kind      ModelKind      @default(wallet)
  id        String         @id @default(cuid())
  provider  WalletProvider
  publicKey String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String
  user      User           @relation(fields: [userId], references: [id])
}
