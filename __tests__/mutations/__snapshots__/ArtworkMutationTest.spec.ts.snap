// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test artwork mutations should create an artwork 1`] = `
Object {
  "data": Object {
    "addArtwork": Object {
      "Artworks": Array [
        Object {
          "creator": Object {
            "fullName": "user 1",
          },
          "description": "Art",
          "owner": Object {
            "fullName": "user 1",
          },
          "saleType": "auction",
          "title": "strstrstr",
        },
      ],
      "ClientErrorArgumentsConflict": null,
      "ClientErrorArtworkNotFound": null,
      "ClientErrorUnknown": null,
      "ClientErrorUserUnauthorized": null,
      "ExternalChainError": null,
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Test artwork mutations should fail to create an artwork because the user is not an approved creator 1`] = `
Object {
  "data": Object {
    "addArtwork": Object {
      "Artworks": null,
      "ClientErrorArgumentsConflict": null,
      "ClientErrorArtworkNotFound": null,
      "ClientErrorUnknown": null,
      "ClientErrorUserUnauthorized": Object {
        "message": "Not approved or non-existing creator",
      },
      "ExternalChainError": null,
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Test artwork mutations should fail to create an artwork with fixed sale type and reserve price set 1`] = `
Object {
  "data": Object {
    "addArtwork": Object {
      "Artworks": null,
      "ClientErrorArgumentsConflict": Object {
        "message": "Argument conflict.",
        "path": "Fixed sale requires a price arg and no reservePrice arg",
      },
      "ClientErrorArtworkNotFound": null,
      "ClientErrorUnknown": null,
      "ClientErrorUserUnauthorized": null,
      "ExternalChainError": null,
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;
