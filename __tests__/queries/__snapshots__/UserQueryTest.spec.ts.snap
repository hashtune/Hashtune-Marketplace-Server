// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test users query should find a user by handle 1`] = `
Object {
  "data": Object {
    "findUser": Object {
      "ClientErrorUnknown": null,
      "ClientErrorUserNotFound": null,
      "Users": Array [
        Object {
          "handle": "user1",
        },
      ],
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Test users query should find a user if the publicKey is valid 1`] = `
Object {
  "data": Object {
    "findUser": Object {
      "ClientErrorUnknown": null,
      "ClientErrorUserNotFound": null,
      "Users": Array [
        Object {
          "handle": "user1",
        },
      ],
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Test users query should not find a user by handle if it does not exist 1`] = `
Object {
  "data": Object {
    "findUser": Object {
      "ClientErrorUnknown": null,
      "ClientErrorUserNotFound": Object {
        "message": "User does not exist",
      },
      "Users": null,
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Test users query should not find a user if no arguments are passed in 1`] = `
Object {
  "data": Object {
    "findUser": Object {
      "ClientErrorUnknown": Object {
        "message": "Please specify either a handle or a public key",
      },
      "ClientErrorUserNotFound": null,
      "Users": null,
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Test users query should query the all the users 1`] = `
Object {
  "data": Object {
    "listCreators": Object {
      "ClientErrorUnknown": null,
      "ClientErrorUserNotFound": null,
      "Users": Array [
        Object {
          "handle": "user2",
        },
        Object {
          "handle": "user1",
        },
      ],
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;
